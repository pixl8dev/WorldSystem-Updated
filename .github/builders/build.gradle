plugins {
    id("com.gradleup.shadow") version "8.3.6"
    id("io.freefair.lombok") version "8.13"
    id("java")
    id("jacoco")
    id("base")
}

ext {
SpigotAPI = "1.21.4-R0.1-SNAPSHOT"
AuthLib = "1.5.26"
WorldEdit = "7.3.11"
FAWE = "2.13.0"
Chunky = "1.3.38"
VaultAPI = "1.7.1"
PlaceholderAPI = "2.11.6"
Lombok = "1.18.34"
CommonsIO = "2.18.0"
Minimessage = "4.19.0"
gson = "2.11.0"
guava = "31.1-jre"

Jupiter = "5.+"
Mockito = "5.+"
Assertj = "3.+"
}

base { 
    archivesName = "${pluginname}"
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
    maven({ url = "https://jitpack.io" })
    maven({ url = "https://repo.extendedclip.com/releases/" })
    maven({ url = "https://maven.enginehub.org/repo/" })
    maven({ url = "https://repo.codemc.io/repository/maven-public/" })
}

dependencies {
    annotationProcessor("org.projectlombok:lombok:${Lombok}")

    implementation("commons-io:commons-io:${CommonsIO}")
    implementation("net.kyori:adventure-text-minimessage:${Minimessage}")

    compileOnly("org.projectlombok:lombok:${Lombok}")
    compileOnly("me.clip:placeholderapi:${PlaceholderAPI}")
    compileOnly("com.github.MilkBowl:VaultAPI:${VaultAPI}")
    compileOnly("com.mojang:authlib:${AuthLib}")
    compileOnly("org.spigotmc:spigot-api:${SpigotAPI}")
    compileOnly("com.sk89q.worldedit:worldedit-bukkit:${WorldEdit}")
    compileOnly("com.sk89q.worldedit:worldedit-core:${WorldEdit}")
    compileOnly("com.fastasyncworldedit:FastAsyncWorldEdit-Bukkit:${FAWE}")
    compileOnly("com.fastasyncworldedit:FastAsyncWorldEdit-Core:${FAWE}")
    compileOnly("org.popcraft:chunky-common:${Chunky}")

    testImplementation("org.junit.jupiter:junit-jupiter:${Jupiter}")
    testImplementation("org.mockito:mockito-core:${Mockito}")
    testImplementation("org.assertj:assertj-core:${Assertj}")
    testImplementation("org.projectlombok:lombok:${Lombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${Lombok}")
}

configurations.all {
    resolutionStrategy {
        force("com.google.code.gson:gson:${gson}")
        force("com.google.guava:guava:${guava}")
    }
}

tasks.processResources {
    expand(project.properties) // Replace placeholders in resources
    from(sourceSets.main.resources.srcDirs) {
        include("plugin.yml")  // Ensure plugin.yml is included
        duplicatesStrategy = DuplicatesStrategy.INCLUDE  // Handle duplicates
    }
    filesMatching("plugin.yml") {
        expand(
            pluginname: pluginname,
            group: group,
            version: version,
            authors: authors,
            description: description,
            apiversion: apiversion,
            depend: depend,
            softdepend: softdepend
        )
    }
}

tasks.shadowJar {
    minimize()
    archiveClassifier.set("")
    archiveFileName.set("${pluginname}-${version}.jar")
    /*dependencies {
        exclude(dependency("commons-io:commons-io"))
        exclude(dependency("net.kyori:adventure-text-minimessage"))
    }*/
}

tasks.javadoc {
    options.links(
            "https://javadoc.io/static/org.jetbrains/annotations/20.1.0/",
            "https://docs.oracle.com/javase/21/docs/api/",
            "https://papermc.io/javadocs/paper/${minecraft}/"
    )
    source = sourceSets.main.allJava
    include("**/api/*")
    destinationDir = new File("build/javadocs")
}

tasks.withType(JavaCompile) {
    options.deprecation = false
    options.encoding = "UTF-8"
    options.compilerArgs += ["-parameters"]
    options.fork = true
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
    ignoreFailures = false
}

tasks.build.dependsOn(tasks.shadowJar)

defaultTasks("build")